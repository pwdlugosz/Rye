

CONNECT
{
	TEMP TO 'C:\Users\pwdlu_000\Documents\Data\TempDB';
};

DECLARE
{
	TICKER AS STRING = 'AAPL';
};

DECLARE
{

	S_URL(TICKER, BEG_DATE, END_DATE) AS LAMBDA 
	= 
	'http://chart.finance.yahoo.com/table.csv?s=' + TICKER 
	+ '&a=' + MONTH(BEG_DATE)
	+ '&b=' + DAY(BEG_DATE)
	+ '&c=' + YEAR(BEG_DATE)
	+ '&d=' + MONTH(END_DATE)
	+ '&e=' + DAY(END_DATE)
	+ '&f=' + YEAR(END_DATE)
	+ '&g=d&ignore=.csv'
	;

	D_URL(TICKER, BEG_DATE, END_DATE) AS LAMBDA 
	= 
	'http://chart.finance.yahoo.com/table.csv?s=' + TICKER 
	+ '&a=' + MONTH(BEG_DATE)
	+ '&b=' + DAY(BEG_DATE)
	+ '&c=' + YEAR(BEG_DATE)
	+ '&d=' + MONTH(END_DATE)
	+ '&e=' + DAY(END_DATE)
	+ '&f=' + YEAR(END_DATE)
	+ '&g=v&ignore=.csv'
	;

};


DECLARE
{
	FIN_SUM AS STRING = "";
};

FIN_SUM = 
$$

	FILE.DOWNLOAD 
	{
		URL = S_URL('@TICKER', '2011-01-01'T, NOW());
		PATH = 'C:\Users\pwdlu_000\Documents\Finance\Stock_Flat_Files\@TICKER.csv';
	};

	FILE.DOWNLOAD 
	{
		URL = D_URL('@TICKER', '2011-01-01'T, NOW());
		PATH = 'C:\Users\pwdlu_000\Documents\Finance\Dividend_Flat_Files\@TICKER.csv';
	};

	CREATE TABLE GLOBAL.STOCK
	{
		TRADE_DT AS DATE,
		OPEN_AMT AS DOUBLE,
		HIGH_AMT AS DOUBLE,
		LOW_AMT AS DOUBLE,
		CLOSE_AMT AS DOUBLE,
		VOLUME AS DOUBLE,
		ADJ_CLOSE AS DOUBLE
	};

	CREATE TABLE GLOBAL.DIVIDEND
	{
		TRADE_DT AS DATE,
		DIV_AMT AS DOUBLE
	};

	FILE.IMPORT { DATA = TABLE GLOBAL.STOCK; PATH = 'C:\Users\pwdlu_000\Documents\Finance\Stock_Flat_Files\@TICKER.csv'; DELIM = ','; SKIP = 1; };

	FILE.IMPORT { DATA = TABLE GLOBAL.DIVIDEND; PATH = 'C:\Users\pwdlu_000\Documents\Finance\Dividend_Flat_Files\@TICKER.csv'; DELIM = ','; SKIP = 1; };

	JOIN
	{
		FROM GLOBAL.STOCK AS S;
		FROM GLOBAL.DIVIDEND AS D;
		LEFT;
	};
	ON
	{
		S.TRADE_DT = D.TRADE_DT;
	};
	APPEND
	{
		NEW GLOBAL.DATA_S1;
		RETAIN
			'@TICKER' AS TICKER,
			S.*,
			D.DIV_AMT ?? 0D AS DIV_AMT
		;
	};

	SORT
	{
		FROM GLOBAL.DATA_S1;
	};
	BY
	{
		TRADE_DT ASC;
	};

	SELECT
	{
		FROM GLOBAL.DATA_S1 AS T;
	};
	DECLARE
	{
		RUN_DIV AS DOUBLE = 0D;
		LOG_RETURN AS DOUBLE = 0D;
		LAG_ADJ_CLOSE AS DOUBLE = NULL -> DOUBLE;
		TICKS AS INT = TABLIX.ROW_COUNT('GLOBAL.DATA_S1');
	};
	MAP
	{

		TICKS--;
		APPEND
		{
			NEW TEMP.@TICKER;
			RETAIN
				T.*,
				LOCAL.TICKS AS TICKS,
				LOG(ADJ_CLOSE) - LOG(LOCAL.LAG_ADJ_CLOSE) AS LOG_RETURN,
				LOG(CLOSE_AMT) - LOG(OPEN_AMT) AS DAY_RETURN
			;
		};

		LAG_ADJ_CLOSE = ADJ_CLOSE;

	};

	AGGREGATE
	{
		FROM TEMP.@TICKER AS A;
	};
	BY
	{
		TICKS / 15 AS TICKS;
	};
	OVER
	{
		COUNT_ALL() AS FREQ_LOG_RETURN,
		SUM(LOG_RETURN) AS LOG_RETURN
		;
	};
	APPEND
	{
		NEW GLOBAL.DATA_S3;
		RETAIN
			OUT.*
			;
	};

	AGGREGATE
	{
		FROM GLOBAL.DATA_S3;
	};
	BY
	{
		CASE
			WHEN LOG_RETURN <= -0.100 THEN 0
			WHEN LOG_RETURN <= -0.095 THEN 1
			WHEN LOG_RETURN <= -0.090 THEN 2
			WHEN LOG_RETURN <= -0.085 THEN 3
			WHEN LOG_RETURN <= -0.080 THEN 4
			WHEN LOG_RETURN <= -0.075 THEN 5
			WHEN LOG_RETURN <= -0.070 THEN 6
			WHEN LOG_RETURN <= -0.065 THEN 7
			WHEN LOG_RETURN <= -0.060 THEN 8
			WHEN LOG_RETURN <= -0.055 THEN 9
			WHEN LOG_RETURN <= -0.050 THEN 10
			WHEN LOG_RETURN <= -0.045 THEN 11
			WHEN LOG_RETURN <= -0.040 THEN 12
			WHEN LOG_RETURN <= -0.035 THEN 13
			WHEN LOG_RETURN <= -0.030 THEN 14
			WHEN LOG_RETURN <= -0.025 THEN 15
			WHEN LOG_RETURN <= -0.020 THEN 16
			WHEN LOG_RETURN <= -0.015 THEN 17
			WHEN LOG_RETURN <= -0.010 THEN 18
			WHEN LOG_RETURN <= -0.005 THEN 19
			WHEN LOG_RETURN <= 0.000 THEN 20
			WHEN LOG_RETURN <= 0.005 THEN 21
			WHEN LOG_RETURN <= 0.010 THEN 22
			WHEN LOG_RETURN <= 0.015 THEN 23
			WHEN LOG_RETURN <= 0.020 THEN 24
			WHEN LOG_RETURN <= 0.025 THEN 25
			WHEN LOG_RETURN <= 0.030 THEN 26
			WHEN LOG_RETURN <= 0.035 THEN 27
			WHEN LOG_RETURN <= 0.040 THEN 28
			WHEN LOG_RETURN <= 0.045 THEN 29
			WHEN LOG_RETURN <= 0.050 THEN 30
			WHEN LOG_RETURN <= 0.055 THEN 31
			WHEN LOG_RETURN <= 0.060 THEN 32
			WHEN LOG_RETURN <= 0.065 THEN 33
			WHEN LOG_RETURN <= 0.070 THEN 34
			WHEN LOG_RETURN <= 0.075 THEN 35
			WHEN LOG_RETURN <= 0.080 THEN 36
			WHEN LOG_RETURN <= 0.085 THEN 37
			WHEN LOG_RETURN <= 0.090 THEN 38
			WHEN LOG_RETURN <= 0.095 THEN 39
			WHEN LOG_RETURN <= 0.100 THEN 40
			ELSE 41
		END AS PDF;
	};
	OVER
	{
		SUM(FREQ_LOG_RETURN) AS FREQ_LOG_RETURN,
		SUM(LOG_RETURN) AS SUM_LOG_RETURN,
		SUM(LOG_RETURN * LOG_RETURN) AS SUM_LOG_RETURN2,
		MIN(LOG_RETURN) AS MIN_LOG_RETURN,
		MAX(LOG_RETURN) AS MAX_LOG_RETURN,
		AVG(LOG_RETURN) AS AVG_LOG_RETURN,
		STDEV(LOG_RETURN) AS STDEV_LOG_RETURN;
	};
	APPEND
	{
		NEW GLOBAL.TEMP_PDF;
		RETAIN OUT.*;
	};

	SORT
	{
		FROM GLOBAL.TEMP_PDF;
	};
	BY
	{
		PDF;
	};

	FILE.EXPORT 
	{ 
		DATA = TABLE GLOBAL.TEMP_PDF; 
		PATH = 'C:\Users\pwdlu_000\Documents\Rye Projects\Flat Files\@TICKER_PDF.csv'; 
		DELIM = ','; 
	};

$$;


EXECUTE 
{
	SCRIPT = GLOBAL.FIN_SUM;
	@TICKER = 'AAPL';
};



